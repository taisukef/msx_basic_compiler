MSX-BASICとの違い
===============================================================================
　MSX-BACON は、MSX-BASIC とほぼ同じ記述で、より高速に動作するプログラムを生成
出来ることを一番の目的に作られています。
　そのために、いくつか割り切りが入っています。
　このテキストは、その割り切りによって発生する差異についてまとめています。

1. 数値演算
　各数式の各項は、コンパイル時に型を決めてしまいます。
　演算の度に型の判定を行う処理を省くためです。
　MSX-BASIC では、演算結果によって柔軟に型を変えています。
　MSX-BACON では、コンパイル時に型を決め打つために、一部の演算において、正確な
結果が得られないケースがあります。

1.1. ABS
　ABS関数は、引数の型と同じ型であると決めてしまいます。
　そのため、整数の引数である -32768 を与えると、演算結果 32768 は整数型の範囲
　-32768 ～ 32767 を越えてしまうため、正しい結果が得られません。

　A=ABS(-32768)
　PRINT A

　-32768

1.2. オーバーフロー
　整数演算の大半は、サブルーチンコールでは無く、Z80 の等価な演算命令に変換します。
　演算命令に置き換わる場合、オーバーフローチェックを行いません。

　100 DEFINTA-Z
　110 A=A+1:GOTO 110

　MSX-BACON では、このループは無限に続きます。
　ただし、一部の整数演算と、浮動小数点演算に関しては、MathPack と呼ばれる 
　MSX の BIOS に組み込まれている演算ルーチン群を利用します。そして、MathPack は
　BASIC のエラーチェックが入っているため、MathPack を使うケースでは、MSX-BASICと
　同様のエラーが発生します。

2. DEFxxx
　変数の暗黙の方を指定する DEFINT, DEFSNG, DEFDBL, DEFSTR ですが、MSX-BACON では
　コンパイル時に確定させてしまいます。
　MSX-BACON は、変数の名前をアドレスに変換してしまうため、コンパイル結果には、
　変数の名前の情報は残っていません。このため、動的に暗黙の型を切り替えられません。
　具体的には、下記のコードの挙動が、MSX-BASIC と異なります。

	100 A%=100:A!=200:A#=300:A$="STR"
	110 DEFINT A:GOSUB 1000
	120 DEFSNG A:GOSUB 1000
	130 DEFDBL A:GOSUB 1000
	140 DEFSTR A:GOSUB 1000
	150 END
	160 PRINT A:RETURN

3. エラー
　MSX-BASIC ではエラーが発生して停止するケースでも、MSX-BACON の場合はエラーにならずに
　そのまま動き続けるケースがあります。
　あるいは、エラーは発生するが、発生するエラーコードが異なる場合があります。

3.1. メモリ不足によって配列変数の確保に失敗した場合
　MSX-BASIC では Subscrpit out of range のエラーになりますが、
　MSX-BACON では Out of memory のエラーになります。
　MSX-BACON のヒープメモリから確保しますが、そのヒープメモリの確保ルーチン内でメモリ不足
　を検知して、Out of memory を発生させるためです。
　ヒープメモリの確保ルーチンは、文字列の処理などでも利用される汎用ルーチンのため、
　「配列の時だけ Subscrpit out of range に差し換える処理」などを入れると、その対応処理
　が入り、コードが大きくなる・遅くなる問題に繋がるので、節約のために Out of memory の
　ままにしてあります。
